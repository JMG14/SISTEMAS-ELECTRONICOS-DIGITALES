/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
#include <TIM3_Trigger.h>
#include <TIM1.h>
#include <PWM.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */


uint8_t modo=0;// !!!!IMPORTANTE!!! NO CAMBIAR DE LUGAR, DEBE ESTAR ARRIBA DE LOS CHAR SINO NO FUNCIONA EL MENÚ !!ALERTA!!!

//-----------------------------------IMPRIMIR POR PANTALLA DEL MENU------------------------------------------------//

char Mensaje_TX[]="\r\n*********************************************************************************\r\n**********"
"*HOLA! SOY EL POLLO DEL ARROZ CON POLLO (*)> ***********\r\n*****"
"*******************************************************************************\r\n"
"Teclee '1' para activar 'modo1'\r\n"
"Teclee '2' para activar 'modo2'\r\n";
char modo1[]="Te encuentras en el modo 1\r\n"
"Teclee 'A' para activar PWM1 con DC 75%\r\n"
"Teclee 'B' para activar PWM2 con DC 25%\r\n"
"Teclee 'C' para PARAR las acciones\r\n"
"Teclee '0' si desea regresar al menu\r\n";
char modo2[]="Te encuentras en el modo 2\r\n"
"Teclee 'T' para medir temperatura\r\n"
"Teclee 'P' para medir promedio\r\n"
"Teclee 'S' para DETENER todas las acciones"
"Teclee '0' si desea regresar al menu\r\n";
char warning[]="No se reconoce el caracter\r\n";
char *confirma="\r\nOK\r\n";
char Rx_data[1];

//-----------------------------------------------------------------------------------------------------------------//

uint8_t seleccion=0;;
uint8_t estado=0;
uint8_t p=0;
uint8_t i=0; //índice del vector (array)
float valor_DR[4]; //registra el valor de las diferentes conversiones (en este caso sabemos que son 4 conversiones)
uint8_t stream=0; //imprime por pantalla
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void clk_cnfig()
{
	__HAL_RCC_TIM4_CLK_ENABLE();
	__HAL_RCC_TIM1_CLK_ENABLE();
	__HAL_RCC_TIM3_CLK_ENABLE();
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{

	extern char Rx_data[1];
	extern uint8_t p;
// ESTE IF ES MUY IMPORTANTE YA QUE HAY VARIOS PUERTOS UART Y EN ESTE CASO ESTAMOS UTILIZANDO LA UART2 (funciona igual que una EXTI15_10 la cual has de seleccionar la que estas utilizando)
	if(huart->Instance == USART2) //ESTE condicional es para seleccionar la UART2 y que entre en el condicional (como cuando tienes varias EXTI y debes elegir una)
	{
		/*if( (strcmp(Rx_data,"\n"))||(strcmp(Rx_data,"\r")))// DEVUELVE un 0 si se cumple la comparación
				{
				//seleccion=Rx_data;
					p=1; //fin porque el terminal termina con \n o \l
				}*/
		if( (!strcmp(Rx_data,"\n"))||(!strcmp(Rx_data,"\r")))// DEVUELVE un 0 si se cumple la comparación
		{
			p=1; //fin porque el terminal termina con \n o \l
		}
		else if(!strcmp(Rx_data,"0" ))
		{
			//GPIOA->ODR ^=(1<<5);
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)Mensaje_TX,sizeof(Mensaje_TX));
			modo=0;
			estado=3;
			p=0; //caracter permitido
			//memset(comparacion, '\0', sizeof(comparacion));
		}
		else if(!strcmp(Rx_data,"1" )&&(!modo))
		{
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)modo1,sizeof(modo1));
			modo=1;
			estado=1;
			p=0; //caracter permitido
			//memset(comparacion, '\0', sizeof(comparacion));
		}
		else if(!strcmp(Rx_data,"2" )&&(!modo))
		{
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)modo2,sizeof(modo2));
			modo=1;
			estado=2;
			p=0; //caracter permitido
		//	memset(comparacion, '\0', sizeof(comparacion));
		}
		else if(!strcmp(Rx_data,"A" ))
				{


					seleccion=1;
					p=0; //caracter permitido
					//memset(comparacion, '\0', sizeof(comparacion));
				}
		else if(!strcmp(Rx_data,"B" ))
					{

						seleccion=2;
						p=0; //caracter permitido
						//memset(comparacion, '\0', sizeof(comparacion));
					}
		else if(!strcmp(Rx_data,"C" ))
					{
			         	 seleccion=3;

						 p=0; //caracter permitido
								//memset(comparacion, '\0', sizeof(comparacion));
					}
		else if(!strcmp(Rx_data,"T" ))
					{


						seleccion=4;
						p=0; //caracter permitido
							//memset(comparacion, '\0', sizeof(comparacion));
					}
		else if(!strcmp(Rx_data,"P" ))
					{

						seleccion=5;
						p=0; //caracter permitido
								//memset(comparacion, '\0', sizeof(comparacion));
					}
		else if(!strcmp(Rx_data,"S" ))
					{
					    seleccion=6;

						p=0; //caracter permitido
										//memset(comparacion, '\0', sizeof(comparacion));
					}else {
						HAL_UART_Transmit_IT(&huart2, (uint8_t *)warning,sizeof(warning));
					}

		HAL_UART_Receive_IT(&huart2, (uint8_t *) Rx_data, 1);
		//Esto lo que hace es reiniciar la interrupción para que siga esperando
		//para que siga esperando un DATO
	}

}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	__NOP(); //cada vez que se complete una transmisión de datos NO realizamos ninguna acción
}



//void TIM1_UP_TIM10_IRQHandler() //TIMER DE CONTROL DE IMPRIMIR POR PANTALLA
//{
	/*if(TIM1->SR & (1<<0)) //Puede ser la IRQ del TIM10 también, nos ASEGURAMOS que es el TIM1 (aunque esté deshabilitado el TIM10)
	{
		//HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5); //Toggle del LED USUARIO
		stream=1; //imprime por pantalla el promedio de las medidas
	}else *///if (TIM10->SR & (1<<0))
//	{
	//	TIM10->CR1 &=~(1<<0); //Apagamos TIMER
		//TIM1->CR1 |=(1<<0); //Activamos el TIMER que imprime por pantalla el valor promedio
		//HAL_ADC_Start_IT(&hadc1);
		 // HAL_TIM_Base_Start_IT(&htim3);
	//}
	//TIM1->SR=0; //RESET interrupción
	//TIM10->SR=0;
//}
void TIM4_IRQHandler()
{
	if(TIM4->SR & 1){
	GPIOA->ODR ^=(1<<5);
	TIM4->SR&=~(1<<0);
	}
}
/*
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) //Función que se ACTIVA cuando se ha realizado la conversión de TODOS los canales
{
		GPIOA->BSRR |=(1<<5);// ENCENDEMOS LED INDICANDO CONVERSIÓN
		uint8_t num_ch=4;
		valor_DR[i]=HAL_ADC_GetValue(hadc);
		i++; // índice del vector
   if (i==num_ch)
    {
    	i=0; //reiniciamos la cuenta
    }
}*/

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

//char warning[]="No se reconoce el caracter\r\n";
char msg1[]="Has seleccionado MODO STOP\r\n";
char msg2[]="Has seleccionado MODO PWM1\r\n";
char msg3[]="Has seleccionado MODO PWM2\r\n";
char msg4[]="Has seleccionado MODO medir Temperatura\r\n";
char msg5[]="Has seleccionado MODO medir promedio\r\n";
/*uint8_t res_string[30]="";
float suma=0;
float promedio=0;
uint8_t j=0;*/
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  clk_cnfig();
  PWM();

 // stream_TIM();
 // deboucing_TIM();
 // TIM1->CR1 |=(1<<0);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_ADC1_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit_IT(&huart2, (uint8_t *)Mensaje_TX,sizeof(Mensaje_TX));
  HAL_UART_Receive_IT(&huart2, (uint8_t *) Rx_data, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(estado==1)//Este se queda esperando por el MODO1
	  {

          switch(seleccion)
          {
          	  case 1:

          		HAL_UART_Transmit(&huart2,(uint8_t *)msg2,strlen(msg2),1000);
          		TIM4->CCER |=(1<<8); //activar PWM1
          		TIM4->CR1 |=(1<<0); //encender Timer
          		seleccion=0;
          		break;

          	  case 2:

          		HAL_UART_Transmit(&huart2,(uint8_t *)msg3,strlen(msg3),1000);
          		TIM4->CCER |=(1<<12); //activar PWM2
          		TIM4->CR1 |=(1<<0); //encender Timer
          		seleccion=0;
        	  	break;

          	  case 3:

          		HAL_UART_Transmit(&huart2,(uint8_t *)msg1,strlen(msg1),1000);
          		TIM4->CCER &=~(11<<8); //desactivar PWM1
          		TIM4->CCER &=~(1<<12); //desactivar PWM2
          		TIM4->CR1 &=~(1<<0); //Apagar Timer
          		 GPIOA->BSRR |=((1<<5)<<16); // apagar LED
          		seleccion=0;
          		break;

          }

	  }
	  if(estado==2)//Se queda esperando por el MODO2
	  {
		  switch(seleccion)
		       {
		           case 4:

		           HAL_UART_Transmit(&huart2,(uint8_t *)msg4,strlen(msg4),1000);
		           seleccion=0;
		           break;

		           case 5:

		           HAL_UART_Transmit(&huart2,(uint8_t *)msg5,strlen(msg5),1000);
		           seleccion=0;
		           break;

		           case 6:

		           HAL_UART_Transmit(&huart2,(uint8_t *)msg1,strlen(msg1),1000);
		           seleccion=0;
		           break;

		        }

	  }
	  if(estado==3)
	  {
		  //----------------RESETEO (HOME) DEL TIMER PWM---------------------------//

		  TIM4->CCER &=~(11<<8); //desactivar PWM1
		  TIM4->CCER &=~(1<<12); //desactivar PWM2
		  TIM4->CR1 &=~(1<<0); //Apagar Timer
		  GPIOA->BSRR |=((1<<5)<<16); //Apagar LED

		  //----------------RESETEO ADC (HOME)---------------------------------//
			//HAL_ADC_Stop_IT(&hadc1);
			//HAL_TIM_Base_Stop_IT(&htim3);
		  estado=0;
	  }
	  if(p==1)
	  	 {
	  	  HAL_UART_Transmit(&huart2,(uint8_t *) confirma,strlen(confirma),1000);
	  	  p=0;
	  	 }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 8400-1;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1000-1;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
