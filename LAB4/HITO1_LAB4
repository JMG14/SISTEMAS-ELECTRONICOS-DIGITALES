/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stdio.h"
#include "string.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define deboucing_TIM TIM5
uint8_t aux=0;// variable global para EXTI
uint8_t c=0; //variable global ADC
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
void clock_config()
{
//---------------------------RELOJ DE LOS PUERTOS GPIO----------------------------//

	__HAL_RCC_GPIOA_CLK_ENABLE(); //habilitamos el reloj del puerto A
	__HAL_RCC_GPIOC_CLK_ENABLE();//Habilitamos el reloj dle puerto C


//--------------------------RELOJ TIMERS------------------------------------------//

	RCC->APB1ENR &=~(1<<3); //reseteamos la posición del TIM5 <<//__HAL_RCC_TIM5_CLK_ENABLE(); Manera con libreria HAL de activar el timer 5>>
	RCC->APB1ENR |=(1<<3);// seteamos la posición del TIM5

//--------------------------RELOJ CONVERSOR ANALOGICO DIGITAL----------------------//

	RCC->APB2ENR |=(1<<8);//ACTIVAMOS relojs ADC1


}
void GPIO_CONFIG()
{
//--------------------------CONFIGURACIÓN DEL BOTÓN EXTERNO------------------------------//

	GPIOC->MODER &=~(11<<13*2);// reset de PIN 13 (BOTON USUARIO) y a la vez se configura como ENTRADA

//-------------------------LED DE ESTADO (LD5)-----------------------------------------//

	GPIOA->MODER &=~(11<<5*2);//reset posición pin 5
	GPIOA->MODER |=(01<<5*2);//SET configuramos como salida led usuario (LD05)
	GPIOA->OTYPER &=~(1<<5);//Configuramos como salida push-pull pin 5

//--------------------CONFIGURACIÓN CANAL DEL ADC----------------------------------------------//

	GPIOA->MODER &=~(11<<(6*2));//RESET
	GPIOA->MODER |=(11<<(6*2));// Configuramos como MODO ANALÓGICO PA6
}
void exti_config()
{
//----------------------CONFIG EXTI13 PARA BOTÓN USUARIO PC13---------------------------//

	SYSCFG->EXTICR[3]&=~(1111<<4);//Reset de la posición
	SYSCFG->EXTICR[3]|=(1<<5);// Habilitar interrupción EXTI13 para puerto C
	EXTI->IMR &=~(1<<13);//RESET
	EXTI->IMR |=(1<<13);//activamos la interrupción relacionada con PC13
	EXTI->RTSR &=~(1<<13);//RESET y habilitacion por flanco de SUBIDA desactivado
	EXTI->FTSR &=~(1<<13);//RESET
	EXTI->FTSR |=(1<<13);//INTERRUPCION activa en flanco de BAJADA
	EXTI->PR |=(1<<3); //LIMPIAMOS EL FLAG

   NVIC_SetPriority(EXTI15_10_IRQn,0);
   NVIC_EnableIRQ(EXTI15_10_IRQn);

}
void deboucing_tim()
{
//-----------------------------Configuración del BT del TIM5----------------------------//

	deboucing_TIM->CNT=0;
	deboucing_TIM->PSC=8399; //Configuración Tu=0,1ms
	deboucing_TIM->ARR=2499; // la cuenta del TIMER llega hasta 250ms

//-----------------------------configuración interna TIM5----------------------------------//

	deboucing_TIM->CR1=0; //RESET
	deboucing_TIM->CR2=0; //Deshabilitado no lo vamos a utilizar
	deboucing_TIM->DIER=0; //RESET
	deboucing_TIM->SMCR=0;// Deshabilitado no se va a utilizar
	deboucing_TIM->CR1 |=(1<<2);//Activamos solo interrupción por update
	deboucing_TIM->DIER |=(1<<0); // Activamos interrupción por update

//------------------------------PUESTA EN MARCHA DEL TIM5-----------------------------------//

	deboucing_TIM->EGR |=(1<<0);//Generamos un evento update
	deboucing_TIM->SR=0; //Reset del flag
	//ACTIVAMOS el timer del deboucing mediante la interrupción generada por el botón PC13 //deboucing_TIM->CR1 |=(1<<0);

  NVIC_EnableIRQ(TIM5_IRQn); //NECESITO que el NVIC sepa en todo momento que está ocurriendo la interrupción
}
void adc_config()
{ //*****IMPORTANTE**** la configuración del ADC SIEMPRE debe hacerse con el ADON=0;//

   ADC->CCR |=(1<<16);//Dividimos frecuencia ADC entre 4 NO PUEDE EXCEDER 36MHz

//---------------------------------------MODO DE TRABAJO DEL ADC-------------------------------------------------------------//
   ADC1->CR1=0; //RESET deshabilitamos el analogWD, dejamos la resolución en 12BITS, deshabilitamos canales inyectados, SCAN mode off, Overrun OFF
      //modo Discontinuo OFF
   ADC1->CR2&=~(1<<0); //RESET ADON=0
   ADC1->CR2 &=~(1<<1); // Queremos que solo haga 1 conversión (DISPARAMOS el ADC solo 1 única vez)
   ADC1->CR2 |=(1<<10); // Deseamos que se active el EOC cuando haya 1 conversión no cuando finalice una secuencia
   ADC1->CR2&=~(1<<11); // Alineación a la derecha. Los BITS más significativos serán "0"  (llega hasta 16bits teóricos aunque solo convierte 12bits)

//-----------------------------------MUESTREO DE LA SEÑAL ANALÓGICA--------------------------------------------------//

   ADC1->SMPR2 &=~(111<<18); //VAMOS a utilizar el PA6 canal 6 para tomar los valores analógicos 3 ciclos
 // qué canales se van a confgurar?//
  ADC1->SQR1 =0; //Solo queremos 1 elemento, en el bit de registro SQR1 donde está "L" le decimos que el registro es "0000" en esa posición porque solo vamos
 //a realizar 1 conversión (1 canal). Este bit L es para indicar CUÁNTOS canales se van a INCLUIR en la SECUENCIA. Si se pone a "0" solo se utiliza un canal, si es
 //0001 entonces se utilizan 2 canales y así sucesivamente.
  ADC1->SQR3 |=(6<<0);// Seleccionamos nuestro canal PA6  "00110" = 6 ADC_IN6 COMO EL PRIMER CANAL EN LA SECUENCIA POR ESO EN SQ0
  //ADC1->SQR3 |=(0110<<0); /********IMPORTANTE PREGUNTAR PORQUE NO FUNCIONA 6 EN BINARIO PORQUE SI PONGO NÚMERO SI FUNCIONA *********************/

 //----------------------------------------ACTIVACIÓN DEL ADC DESPUES DE CONFIGURAR TODO-----------------------//
  ADC1->CR2 |=(1<<0);// Encendemos el ADC
}
void EXTI15_10_IRQHandler()
{
	if(EXTI->PR & (1<<13))
	{
		if(aux==0)
		{
       //GPIOA->BSRR |=(1<<5); //Si se activa la EXTI se enciende el led de usuario
       deboucing_TIM->CR1 |=(1<<0);//activación del TIMER del deboucing
       aux=1;
		}/*else
		{
        aux=0;
        deboucing_TIM->CR1 |=(1<<0);//Se activa el deboucing para evitar los rebotes
		}*/
	}
  EXTI->PR |=(1<<13); //reset del flag
}
void TIM5_IRQHandler()
{
	deboucing_TIM->CR1 &=~(1<<0);// Apagamos el TIMER ya llegó a 250ms
  if(aux==1)
  {
	  GPIOA->BSRR |=(1<<5); //Si se activa el ADC con el DEBOUCING se enciende el led de usuario
	  c=1; //Nos aseguramos que se haya encendido y que hayan pasado los 250ms
  }/*else
  {
	GPIOA->BSRR |=((1<<5)<<16); //Reset del flag
	c=0;
  }*/
deboucing_TIM->SR=0;//RESET de TODOS los flag
}
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

#ifdef __GNUC__
/*With GCC, small printf (option LD Linker->Libraries->Small
printf set to 'Yes') calls __io_putchar()*/
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /*__GNUC__*/

PUTCHAR_PROTOTYPE
{
HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,100);
return ch;
}
GETCHAR_PROTOTYPE
{
/* Place your implementation of fgetc here
e.g. write a character to the EVAL_COM1 and Loop until the
end of transmission */
char ch;
HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
return ch;
}
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
uint16_t valor_DR=0; // almacena el valor del registro DR (dato de conversor)
float f_res=0; //almacena valor de escalado
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  setvbuf (stdin, NULL, _IONBF, 0); //OJO necesario para getch
  /* USER CODE END Init */

  /* Configure the system clock */

  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
  MX_USART2_UART_Init();

  /* USER CODE BEGIN 2 */
  uint8_t res_string1[]="Vamos a realizar una conversion ADC en modo SIMPLE\r\n";
  uint8_t res_string[50];
 // sprintf(res_string1, "Medida: %.1fV");
  HAL_UART_Transmit(&huart2, (uint8_t*) res_string1, strlen(res_string1), HAL_MAX_DELAY);
  clock_config();
  GPIO_CONFIG();
  deboucing_tim();
  exti_config();
  adc_config();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(c==1)
	  {

		 c=0; //reinicio
		 aux=0;//reinicio
		 ADC1->CR2 |=(1<<30);//START empieza la conversión

		   while ((ADC1->SR & (1<<1))==0); //mientras no sea 1 el EOC (no haya llegado a FIN de conversión) el programa no realizará ninguna acción

		   valor_DR=(ADC1->DR); //el programa lee el registro del ADR para obtener el valor de la conversión

		   //Escalamos el dato para "traducir" o leer el dato que nos entrega el conversor en unidades de voltaje.
		   f_res=valor_DR * (3.3/4095);
		   sprintf(res_string, "Medida: %.1fV\n", f_res);
		   HAL_UART_Transmit(&huart2, (uint8_t*) res_string, strlen(res_string), HAL_MAX_DELAY);
		   GPIOA->BSRR |= (1<<5)<<16; //APAGA EL LED, ya ha realizado la conversión
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
